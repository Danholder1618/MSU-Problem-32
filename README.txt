Задача 32: Сведение уравнения ко второму порядку и решение методом Адамса-Мултона 6 порядка с методом пристрелки
Описание работы программы

Программа решает задачу нахождения функции y(x)y(x) при заданном дифференциальном уравнении второго порядка вида:
y′′+p(x)y′+q(x)y=f(x)
y′′+p(x)y′+q(x)y=f(x)

с начальными условиями y(a)=cy(a)=c, y(b)=dy(b)=d на отрезке [a,b][a,b].
Основной алгоритм:

    Сведение уравнения ко второму порядку: Мы производим замену переменной z=y′ z=y′, что приводит к системе уравнений:
    {y′=zz′=−p(x)z−q(x)y+f(x)
    {y′=zz′=−p(x)z−q(x)y+f(x)​

    с начальными значениями y(a)=cy(a)=c, z(a)=tz(a)=t, где t — неизвестный параметр, который подбирается с помощью метода пристрелки.

    Метод пристрелки: Метод пристрелки используется для нахождения значения параметра t, при котором значение приближения в точке b будет равно d. Для этого решается уравнение F(t)−d=0 F(t)−d=0, где F(t)F(t) — значение функции в точке b, вычисленное методом Адамса-Мултона.

    Решение системы уравнений: Система решается методом Адамса-Мултона 6 порядка. Решение производится в три этапа:
        Первый этап: использование метода Рунге-Кутты 4 порядка для нахождения первых четырёх значений системы.
        Второй этап: использование метода Адамса-Мултона 6 порядка для более точного приближения значений в следующей точке.
        Третий этап: повторение второго этапа, пока не будут найдены значения функции на всём интервале с шагом h.

Инструкция по использованию
Входные данные:

По умолчанию программа считывает входные данные из файла input.txt и записывает результаты в output.txt. Для использования произвольных файлов входных и выходных данных можно передать их через параметры в командной строке.

Формат входных данных:

a b c d h eps

    a и b — левая и правая границы интервала.
    c и d — значения искомой функции в точках a и b.
    h — шаг метода.
    eps — точность для метода пристрелки.

В файле funkx_32.c необходимо задать функции p(x)p(x), q(x)q(x), и f(x)f(x).

Пример содержимого входного файла:

0 3 1 -17 0.00001 0.00001

Где:

    input.txt — файл с входными данными.
    output.txt — файл для записи результатов.

Выходные данные:

В выходном файле будет выведено приближение решения в виде строк:

<Точка> <Значение приближения на точке>

Коды возвращаемых ошибок:

    Process done — Программа успешно завершила выполнение.
    -1 — Интервал не найден, уравнение не имеет решения.

Описание исходного кода
Функции, реализованные в файле main_32.c:

    int main
        Описание: Реализует интерфейс взаимодействия с подпрограммой для рисования и подпрограммой для решения задачи. Также реализует подбор оптимального шага h для точности eps.

Функции, реализованные в файле odu_36.c:

    Solve AdamsSystem6Solver(double y1_0, double y2_0, double a, double b, double h, Solve solve, int needSolveWithPoints)**
        Аргументы: числа y10, y20, a, b, h и указатели на массивы для временной памяти и результата.
        Описание: Решает систему дифференциальных уравнений первого порядка с начальными условиями y(a)=cy(a)=c, z(a)=tz(a)=t и записывает результат в массив result.
        Вывод: Результат в массиве.

    double F1(double y2)

    double F2(double x, double y1, double y2)
        Описание: Функции, необходимые для вычисления правых частей уравнений системы.

    Solve ShootingMethod(double y_in_a, double y_in_b, double a, double b, double h, double e, Solve SystemSolver)**
        Аргументы: параметры a, b, c, d, h, eps и указатели на массивы.
        Описание: Реализует метод пристрелки для нахождения значения параметра t, при котором F(t)F(t) приближается к значению d.
        Вывод: Возвращает 0, если параметр t найден, или -1, если интервал не найден. В массиве result хранится приближение искомой функции с найденным параметром t.

Функции, реализованные в файле main_32.c:

    _Bool DrawGraphics(double a, double h, Solve solve)*
        Аргументы: aa — начало интервала, hh — шаг, указатель на массив с приближениями.
        Описание: Рисует графики функции y(x)y(x).